#!/usr/bin/env python
""" Example: Simple Packet Printer """
import os
import argparse
from pprint import pprint

# Local imports
from chains.utils import signal_utils
from chains.sources import packet_streamer
from chains.links import packet_meta, reverse_dns, transport_meta, flows, http_meta

def run(iface_name=None, max_packets=10000):
    """Run the Simple Packet Printer Example"""

    # Create the classes
    streamer = packet_streamer.PacketStreamer(iface_name=iface_name, max_packets=max_packets)
    meta = packet_meta.PacketMeta()
    rdns = reverse_dns.ReverseDNS()
    tmeta = transport_meta.TransportMeta()
    fmeta = flows.Flows()
    hmeta = http_meta.HTTPMeta()

    # Set up chain
    meta.link(streamer)
    rdns.link(meta)
    tmeta.link(rdns)
    fmeta.link(tmeta)
    hmeta.link(fmeta)

    # Print out the URIs
    for item in hmeta.output_stream:
        if not item['http']:
            continue

        # Get both HTTP and HTTPS requests
        if item['http']['type'] == 'HTTP_REQUEST':
            uri = item['http']['data']['uri']
            headers = item['http']['data']['headers']
            referer = headers['referer'] if 'referer' in headers else '-'
            print item['http']['type']
            print '%s --> Host: %s \nURI: %s \nReferer: %s \nAgent: %s\n' % (item['src'], headers['host'], uri, referer, headers['user-agent'])
        elif item['http']['type'] == 'HTTPS_REQUEST':
            tls_records = item['http']['data']['tls_records']
            print item['http']['type']
            print '%s --> %s(%s) tls_records(%d)' % (item['src'], item['dst'], item['dst_domain'], len(tls_records))
            for record in tls_records:
                pprint(record)
            print

def test():
    """Test the Simple Packet Printer Example"""
    from chains.utils import file_utils

    # For the test we grab a file, but if you don't specify a
    # it will grab from the first active interface
    data_path = file_utils.relative_dir(__file__, '../data/http.pcap')
    run(iface_name = data_path)

def my_exit():
    """Exit on Signal"""
    print 'Goodbye...'

if __name__ == '__main__':

    # Collect args from the command line
    parser = argparse.ArgumentParser()
    parser.add_argument('-m','--max-packets', type=int, default=10000, help='How many packets to process (0 for infinity)')
    parser.add_argument('-p','--pcap', type=str, help='Specify a pcap file instead of reading from live network interface')
    args, commands = parser.parse_known_args()
    if commands:
        print 'Unrecognized args: %s' % commands
    try:
        # Pcap file may have a tilde in it
        if args.pcap:
            args.pcap = os.path.expanduser(args.pcap)

        with signal_utils.signal_catcher(my_exit):
            run(iface_name=args.pcap, max_packets=args.max_packets)
    except KeyboardInterrupt:
        print 'Goodbye...'
